

http://forfuture1978.iteye.com/category/89151
http://blog.csdn.net/forfuture1978/article/details/4976793

Luke(索引查看工具)
	http://code.google.com/p/luke/downloads/list
	D:\JAVA\Softwares>java -jar lukeall-3.5.0.jar

Tika(文档解析工具)
	D:\JAVA\Softwares>java -jar tika-app-1.0.jar

MMSeg4j 1.8.5 支持 lucene 3.1, solr 3.1。
	自定义词库
	data 目录（或你定义的目录）下读到"words"前缀且".dic"为后缀的文件。如：data/words-my.dic。
	注：由于 utf-8 文件有带与不带 BOM 之分，建议词库第一行为空行或为无 BOM 格式的 utf-8 文件。
	
Solr
	1、Solr 3.5.0 solr-test-framework API
	http://lucene.apache.org/solr/api/test-framework/index.html
	2、WIKI
	http://wiki.apache.org/solr/FrontPage
	3、入门教程
	http://lucene.apache.org/solr/tutorial.html

1、如何创建索引
第一步：一些要索引的原文档(Document)。 
第二步：将原文档传给分词组件(Tokenizer)。
	分词组件(Tokenizer)会做以下几件事情(此过程称为Tokenize) ： 
	1. 将文档分成一个一个单独的单词. 
	2. 去除标点符号.
	3. 去除停词(Stop word).(StopFilter:TokenFilter)
	经过分词(Tokenizer)后得到的结果称为词元(Token)。
第三步：将得到的词元(Token)传给语言处理组件(Linguistic Processor)。 
	对于英语，语言处理组件(Linguistic Processor) 一般做以下几点： 
	1. 变为小写(Lowercase).(lowerCaseFilter:TokenFilter)
	2. 将单词缩减为词根形式，如“cars”到“car”等。这种操作称为：stemming.(PorterStemFilter:TokenFilter)
	3. 将单词转变为词根形式，如“drove”到“drive”等。这种操作称为：lemmatization.(PorterStemFilter:TokenFilter)
	语言处理组件(linguistic processor)的结果称为词(Term)。
第四步：将得到的词(Term)传给索引组件(Indexer)。 
	索引组件(Indexer)主要做以下几件事情： 
	1. 利用得到的词(Term)创建一个字典。
	2. 对字典按字母顺序进行排序。
	3. 合并相同的词(Term) 成为文档倒排(Posting List) 链表。
	
2、如何对索引进行搜索
第一步：用户输入查询语句。
第二步：对查询语句进行词法分析，语法分析，及语言处理。
	1. 词法分析主要用来识别单词和关键字。例：a and b or c。
	2. 语法分析主要是根据查询语句的语法规则来形成一棵语法树。
	3. 语言处理同索引过程中的语言处理几乎相同。
第三步：搜索索引，得到符合语法树的文档。
第四步：根据得到的文档和查询语句的相关性，对结果进行排序。
	1.首先，一个文档有很多词(Term)组成。
	2.其次对于文档之间的关系，不同的Term重要性不同。
	3.找出词(Term) 对文档的重要性的过程称为计算词的权重(Term weight) 的过程。
		影响一个词(Term)在一篇文档中的重要性主要有两个因素：
		Term Frequency (tf)：即此Term在此文档中出现了多少次。tf 越大说明越重要。 
		Document Frequency (df)：即有多少文档包含次Term。df 越大说明越不重要。
	4.判断词(Term) 之间的关系从而得到文档相关性的过程应用一种叫做向量空间模型的算法(Vector Space Model)。



Lucene 的analysis 模块主要负责词法分析及语言处理而形成Term 。 
Lucene 的index 模块主要负责索引的创建，里面有IndexWriter 。 
Lucene 的store 模块主要负责索引的读写。 
Lucene 的QueryParser 主要负责语法分析。 
Lucene 的search 模块主要负责对索引的搜索。 
Lucene 的similarity 模块主要负责对相关性打分的实现。



完全的实时搜索：只要数据库一变动，马上要更新索引，马上writer.commit来操作。
非实时搜索：IndexReader作为单例来搜索。在固定的时间对索引进行更新操作，通过IndexReader.openIfChanged(reader)打开新的reader。
近实时搜索：当用户修改了信息之后，先把索引保存到内存中，然后在一个统一的时间对内存中的所有索引进行提交操作。内存中的索引也可以查的到。
	NRTManager(Near-real-time)
	SearcherManager











